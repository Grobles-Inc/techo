---

---

<dialog id="property_modal" class="modal">
  <div class="modal-box w-11/12 max-w-5xl">
    <h3 class="font-bold text-lg">Agregar Propiedad</h3>
    <form
      action="/api/properties"
      method="POST"
      class="py-4 grid grid-cols-1 md:grid-cols-2 gap-4"
    >
      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Título</span>
        </label>
        <input
          type="text"
          placeholder="Título de la propiedad"
          class="input input-bordered w-full"
          name="titulo"
          required
        />
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Ubicación</span>
        </label>
        <input
          type="text"
          placeholder="Ubicación de la propiedad"
          class="input input-bordered w-full"
          name="ubicacion"
          required
        />
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Tipo de Operación</span>
        </label>
        <select
          class="select select-bordered w-full"
          name="tipoOperacion"
          required
        >
          <option value="" disabled selected>Selecciona una opción</option>
          <option>Venta</option>
          <option>Alquiler</option>
        </select>
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Área de Terreno (m²)</span>
        </label>
        <input
          type="number"
          placeholder="Área del terreno en m²"
          class="input input-bordered w-full"
          name="areaTerreno"
          required
        />
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Tipo de Vivienda</span>
        </label>
        <select
          class="select select-bordered w-full"
          name="tipoVivienda"
          required
        >
          <option value="" disabled selected>Selecciona una opción</option>
          <option>Casa</option>
          <option>Apartamento</option>
          <option>Terreno</option>
        </select>
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Descripción</span>
        </label>
        <textarea
          class="textarea textarea-bordered h-24"
          placeholder="Descripción detallada de la propiedad"
          name="descripcion"
          required></textarea>
      </div>

      <div class="form-control w-full mb-4">
        <label class="label">
          <span class="label-text">Características Adicionales</span>
        </label>
        <textarea
          class="textarea textarea-bordered h-24"
          placeholder="Características adicionales (ej. número de habitaciones, baños, etc.)"
          name="caracteristicas"></textarea>
      </div>

      <div class="form-control w-full mb-6">
        <label class="label">
          <span class="label-text">Imágenes</span>
        </label>
        <input
          type="file"
          multiple
          class="file-input file-input-bordered w-full"
          id="image-upload-input"
        />
        <div
          id="loading-spinner"
          class="hidden loading loading-spinner loading-md"
        >
        </div>
        <div id="image-preview" class="mt-2"></div>
        <input type="hidden" name="imagenes" id="image-urls-input" />
      </div>
      <div class="modal-action mt-4 col-span-2">
        <button type="submit" class="btn btn-primary" id="submit-button"
          >Guardar Propiedad</button
        >
        <form method="dialog">
          <button class="btn">Cerrar</button>
        </form>
      </div>
    </form>
  </div>
</dialog>

<script is:inline>
  const imageUploadInput = document.getElementById("image-upload-input");
  const loadingSpinner = document.getElementById("loading-spinner");
  const imagePreview = document.getElementById("image-preview");
  const imageUrlsInput = document.getElementById("image-urls-input");
  const submitButton = document.getElementById("submit-button");
  const propertyModal = document.getElementById("property_modal");

  let uploadedImageUrls = [];

  imageUploadInput.addEventListener("change", async (e) => {
    const target = e.target;
    if (target.files && target.files.length > 0) {
      loadingSpinner.classList.remove("hidden");
      submitButton.disabled = true;

      const files = Array.from(target.files);
      const newUploadedUrls = [];

      for (const file of files) {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("upload_preset", "ml_default"); // Replace with your actual upload preset
        formData.append("folder", "techo/properties"); // Custom folder

        try {
          const response = await fetch(
            "https://api.cloudinary.com/v1_1/diqe1byxy/image/upload", // Replace with your Cloudinary cloud name
            {
              method: "POST",
              body: formData,
            },
          );
          const data = await response.json();
          if (data.secure_url) {
            newUploadedUrls.push(data.secure_url);

            // Add to preview
            const imgElement = document.createElement("img");
            imgElement.src = data.secure_url;
            imgElement.alt = "Property Image";
            imgElement.classList.add(
              "w-24",
              "h-24",
              "object-cover",
              "inline-block",
              "mr-2",
              "mb-2",
            );
            imagePreview.appendChild(imgElement);
          }
        } catch (err) {
          console.error("Upload error:", err);
        }
      }
      uploadedImageUrls = [...uploadedImageUrls, ...newUploadedUrls];
      imageUrlsInput.value = JSON.stringify(uploadedImageUrls);

      loadingSpinner.classList.add("hidden");
      submitButton.disabled = false;
    }
  });

  // Handle form submission to redirect and reset form
  const form = document.querySelector("#property_modal form");
  form.addEventListener("submit", (event) => {
    // The form directly POSTs to the API endpoint.
    // After successful submission (handled by the API), the page will redirect.
    // We add a listener here to close the modal after a successful submit if not redirected by browser
    // (e.g. if the form was submitted via JS fetch in the future)
    // For this direct form submission, the browser will handle the redirect, so manual close not needed here.
    // However, if we were to fetch and preventDefault, we would close the modal here.
    // Reset form after successful submission (after redirect happens, this context might be lost)
    // For now, assume page reload/redirect will clear form state.
  });

  // To handle modal closing on successful form submission (if not redirected)
  // This part is more complex for pure Astro forms as they cause a full page navigation.
  // A common pattern is to redirect from the server-side API endpoint, as done in src/pages/api/properties.js.
  // If you want client-side modal closing without full page reload, you would need to use JS fetch for form submission.
  // Given the current setup, the API endpoint redirects, so this form will trigger a page reload/navigation.
</script>
